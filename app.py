import streamlit as st
from fpdf import FPDF
import uuid
from io import BytesIO

st.set_page_config(page_title="PitchGPT - Gerador de Apresenta√ß√µes de Vendas", layout="wide")

# Estilos de p√°gina
st.markdown("""
    <style>
        .main {
            background-color: #f9f9fb;
        }
        .stButton>button {
            background-color: #4CAF50;
            color: white;
            border-radius: 8px;
        }
        .stSlider>div>div {
            color: #4CAF50;
        }
        .premium {
            color: #e53935;
            font-weight: bold;
        }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo
st.markdown("""
    <div style='padding: 1rem; background-color: #e0f2f1; border-left: 5px solid #00796b; border-radius: 8px;'>
        <h2>üöÄ PitchGPT - Crie sua Apresenta√ß√£o de Vendas em Minutos!</h2>
        <p>Responda algumas perguntas e receba um pitch incr√≠vel para seu produto ou servi√ßo.</p>
    </div>
""", unsafe_allow_html=True)

# Fun√ß√£o para sugerir p√∫blico-alvo com base no produto
def sugerir_publico(produto):
    sugestoes = {
        "tecnologia": ["Desenvolvedores de software", "Empresas de TI", "Startups tecnol√≥gicas", "Entusiastas de tecnologia"],
        "sa√∫de": ["Profissionais de sa√∫de", "Consult√≥rios m√©dicos", "Pacientes interessados em tratamentos", "Cl√≠nicas de est√©tica"],
        "moda": ["Fashionistas", "Lojas de roupas", "Influenciadores de moda", "P√∫blico jovem e antenado"],
        "educa√ß√£o": ["Professores", "Alunos de diferentes idades", "Institui√ß√µes de ensino", "EAD e cursos online"],
        "beleza": ["Sal√µes de beleza", "Influenciadores de beleza", "Marcas de cosm√©ticos", "Consumidores de produtos de cuidado pessoal"]
    }
    
    for chave in sugestoes:
        if chave in produto.lower():
            return sugestoes[chave]
    
    return ["P√∫blico geral", "Entusiastas", "Clientes potenciais"]

# Formul√°rio de entrada de dados
st.markdown("### üí° Diga-nos mais sobre seu produto ou ideia:")

with st.form("pitch_form"):
    produto = st.text_input("Nome do Produto ou Servi√ßo:")
    publico_alvo = st.text_input("Quem √© o p√∫blico-alvo? (Opcional):")
    problema = st.text_area("Qual problema seu produto/servi√ßo resolve?")
    solucao = st.text_area("Qual √© a solu√ß√£o que seu produto/servi√ßo oferece?")
    diferenciais = st.text_area("Quais s√£o os diferenciais do seu produto/servi√ßo?")
    preco = st.text_input("Qual √© o pre√ßo do produto (opcional):")

    # Sugest√£o de p√∫blico-alvo se o usu√°rio n√£o inserir
    if not publico_alvo:
        publico_sugerido = sugerir_publico(produto)
        st.markdown(f"üîç **Sugest√µes de P√∫blico-alvo para o produto '{produto}':**")
        st.write(", ".join(publico_sugerido))
    
    submit = st.form_submit_button("Gerar Pitch")

# Fun√ß√£o para criar o pitch
def gerar_pitch(produto, publico_alvo, problema, solucao, diferenciais, preco):
    pitch = f"""
    **Produto:** {produto}

    **P√∫blico-alvo:** {publico_alvo}

    **Problema:** {problema}

    **Solu√ß√£o:** {solucao}

    **Diferenciais:** {diferenciais}

    **Pre√ßo:** {preco if preco else 'N√£o informado'}
    """
    
    # A estrutura do Pitch - AIDA (Aten√ß√£o, Interesse, Desejo, A√ß√£o)
    pitch_completo = f"""
    ## üöÄ Pitch de Vendas

    ### Atraia Aten√ß√£o:
    **{produto}** vai transformar a vida de **{publico_alvo}**!

    ### Gere Interesse:
    O problema de **{publico_alvo}** √© **{problema}**, e a solu√ß√£o ideal √© **{produto}**, que oferece **{solucao}**.

    ### Desperte o Desejo:
    Com **{produto}**, voc√™ vai poder [resolver o problema] e se beneficiar de **{diferenciais}**.

    ### Chame para A√ß√£o:
    N√£o perca a chance de melhorar sua vida com **{produto}** por apenas **{preco if preco else 'Pre√ßo a consultar'}**.
    """

    return pitch_completo

# Gerar pitch
if submit and produto:
    pitch_gerado = gerar_pitch(produto, publico_alvo, problema, solucao, diferenciais, preco)
    st.markdown("### ‚ú® Seu Pitch de Vendas:")
    st.markdown(pitch_gerado)

    # Exportar para PDF
    class PDF(FPDF):
        def header(self):
            self.set_font("Arial", "B", 14)
            self.cell(0, 10, "Pitch de Vendas Gerado", ln=True, align="C")

        def add_pitch(self, pitch):
            self.set_font("Arial", size=12)
            self.multi_cell(0, 10, pitch)

    pdf = PDF()
    pdf.add_page()
    pdf.add_pitch(pitch_gerado)

    # Gerar PDF em mem√≥ria
    buffer = BytesIO()
    pdf.output(buffer)
    buffer.seek(0)

    st.download_button("üìÑ Baixar Pitch em PDF", buffer, file_name="pitch_de_vendas.pdf")

    st.success("üöÄ Seu Pitch foi gerado com sucesso!")
 
